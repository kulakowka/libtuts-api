[  
   {  
      "title":"Простейшие клеточные автоматы и их практическое применение",
      "slug":"the-simplest-cellular-automata-and-their-practical-application",
      "sourceUrl":"https://habrahabr.ru/post/273393/",
      "content":"Рад сообщить вам, что мы вплотную подошли к созданию анимации. Также как и в случае первой статьи — мы начнем с азов. Потому что иными способами анимацию не сделать. Никаких бегающих и прыгающих людей, искрометных схваток и батальных сцен нам не получить, в том случае если нам неизвестно как двигаются простейшие объекты, до тех пор пока мы не понимаем, а главное не чувствуем принципов движения и динамики. И как уж повелось — это не будет чем-то сложным и малопонятным.\n\nДумаю, что все уже привыкли к тому, что материал рассматривается так, чтобы будущим художником использовалось как можно меньшее количество инструментария, при максимальном нажиме на главные аспекты рассматриваемой темы. В этой статье вы не прочтёте дифирамбов тому или иному пакету, не будете затянуты в пучину зубодробительных терминов, не будете отправлены на множество сторонних веб-ресурсов, где вам будет предложено самостоятельно знакомиться с чем-либо. Все изображения будут созданы здесь, вместе с вами, элементарными средствами на базе классической покадровой анимации.\n\nНе смотря на то, что вторая часть цикла о пиксель-арте собрала куда меньше положительных отзывов и согласно статистике пользовалась меньшим успехом на Хабре — мы продолжим копать пиксель-арт так, чтобы исследованные нами территории перестали быть белыми пятнами, чтобы мы могли, наконец, воздвигнуть здесь надежный укрепрайон. Популярность вещь приходящая и уходящая. Было бы смешно руководствоваться исключительно ею. Тем более что есть люди, которые настояли на скорейшем выпуске этой части цикла. Я ещё коснусь этой темы в конце публикации.\n\n```javascript\n'use strict'\n\nconst async = require('async')\nconst rd = require('require-dir')\nconst mongoose = require('../../utils/mongoose')\nconst models = rd('../../models', {recurse: true})\nconst data = rd('./data')\n```\n\nВ конце ноября компания «Яндекс» анонсировала свой обновленный погодный сервис под названием «Яндекс.Метеум». Якобы новая программная разработка по своим алгоритмам способна рассчитывать прогноз с точностью до дома. Меня как метеоролога-любителя не мог не заинтересовать новый продукт. Я всегда с уважением относился к Яндексу, даже несмотря на неудачный перезапуск Кинопоиска, но детально изучив анонс, опубликованный на сайте «Хабрахабр», я нашёл в нём ряд несостыковок и логических ошибок. Тогда я решил провести своё исследование точности нового сервиса, относительно других погодных ресурсов, а именно моего сайта «Погода 45» (Прогноз погоды для Кургана) и Foreca (базовый ресурс с которого Яндекс берёт данные).\n\n```ruby\ndef action\n   @user = User.find\nend\n```\n\nВ декабре 2015 года я обнаружил критически опасную уязвимость в одном из сайтов PayPal для бизнеса, которая позволяла мне выполнять произвольные команды на веб-серверах внутри корпоративной сети. При отправке веб-формы на сайте http://manager.paypal.com в одном из скрытых параметров передавались закодированные данные в виде сериализованного объекта Java. Данный параметр можно было подделать, изменив название класса и значения его свойств, что и привело к выполнению произвольного кода на серверах. Я немедленно сообщил об этой проблеме в PayPal, и она была быстро исправлена.",
      "keywords":"express,nodejs,react",
      "languages":["javascript","ruby","go","java","python","css","html","perl","r"],
      "platforms":["npm","go","rubygems","meteor","atom","pub","sublime","elm","wordpress"],
      "projects":[
         {"name":"mocha", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":999999
   },
   {  
      "title":"Writing a Basic App in Redux",
      "slug":"writing-a-basic-app-in-redux",
      "sourceUrl":"http://davidandsuzi.com/writing-a-basic-app-in-redux/",
      "content":"I’ve been a bit heads down for the last two months, working on a project with React 0.12.2 and Reflux. In that course of time, the React ecosystem has begun to feel foreign to me. React is up to 0.14 beta, React-Router is up to 1.0 beta, a few ES6 and ES7 patterns have been popularized, and Redux has gained a large amount of support and momentum and arguably emerged as the Flux library of choice.\nI’ve been wanting to look at Redux for a while, but the only way I can motivate myself to learn stuff like this is by doing write ups. So let’s build a simple Pokedex app that displays a list of Pokemon, has a search input field, and lets you click a button to catch some Pokemon. That’s it, intentionally contrived. Everything will be synchronous for now, but I’d ambitiously like to do writeups in the future that introduce the capabilities/usage of Redux Dev Tools, ImmutableJS, GraphQL, and server-side rendering.\nThis article is being written specifically for those who have prior experience with React and Flux, but have not had any prior experience with Redux.",
      "keywords":"immutable,functional,predictable,state,reducer,redux",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","rubygems"],
      "projects":[
         {"name":"mocha", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":150
   },
   {  
      "title":"Building a Stateless Rails API with React and Twitter OAuth",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "keywords":"twitter,functional,predictable,state",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"mocha", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   },
   {  
      "title":"Getting MEAN with Mongo, Express, Angular, and Node",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "keywords":"elm,flux,replay,live,state,reducer,redux",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"mocha", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   },
   {  
      "title":"Web Development with Node and Express",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "keywords":"live,hot,immutable,state,reducer,redux",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"mocha", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   },
   {  
      "title":"The definitive list of open source resources on Github",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"mocha", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   },
   {  
      "title":"Inspiration UI - Find design inspiration from real live projects",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "keywords":"elm,flux,replay,live,hot,immutable,functional,predictable,state,reducer,redux",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"express.js", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   },
   {  
      "title":"Web design tool, CMS, and hosting platform",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "keywords":"elm,flux,replay,live,hot,immutable,functional,predictable,state,reducer,redux",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"browserify", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   },
   {  
      "title":"Getting started with Redux - Example application",
      "slug":"building-a-stateless-rails-api-with-react-and-twitter-oauth",
      "sourceUrl":"http://fredguest.com/2015/03/06/building-a-stateless-rails-api-with-react-and-twitter-oauth/",
      "content":"I recently built a demo project in order to learn a few new libraries, new to me anyway, those being React, React-Router, Webpack, and Rails-Api, which seemed like a good chance to do some writing and maybe spare someone a little pain in picking these things up for themselves. I'm going to assume some basic familiarity with Rails because there is a ton of ground to cover, but issues related to integrating the Rails API with the client are covered in detail. Even if you don't know or care about Rails, much of this post should still be usable because the React client is completely decoupled from the API and could just as easily live in it's own repo and be deployed as a separate application.\n\nTLDR: The end result will be a Heroku deployed, JSON only server based on the Rails-Api gem to exclude action-view, sprockets, and sessions, using Twitter OAuth for identity and JSON Web Tokens for authentication, and a client based on React, React-Router, and Webpack. Here is the finished code, and here is a live demo.\n\n## Why This Architecture?\nPart of the reason these libraries are interesting is the role they can play in the generalized architecture of stateless servers with JavaScript heavy clients, as opposed to HTML generating servers that are coupled to the browser by their own sessions. The strongest arguments for this architecture are better user experience, since changes to the interface can be rendered without a round trip to the server, and the ability to take an API originally built for a browser client and easily reuse it for iOS and Android clients. Even though this idea has been around for a few years, it's still new relative to stateful, HTML generating servers, and with fewer accepted best practices, let alone pre-baked solutions, which can make it a challenge getting started if you're accustomed to using Rails, or an alternative batteries-included framework. Another option would be a Firebase backend with 100% of the application code in the client, but if you need to run background processes, interact with services from the backend, or have sufficiently complex logic tied to your models, you will want a proper server you can fully control.\n\n## Why Use React?\nReact, which is advertised simply as \"a JavaScript library for building user interfaces\" as opposed to an MVC framework, takes a fundamentally different view of dynamic rendering in the browser than any established solution that preceded it. Tom Occhino, a PM on the team led by Jordan Walke that created the technology behind React, describes the conceptual model that React aspires to as, anytime something occurs that would require a change to the DOM, just \"blow it away and re-render\" rather than mutate the existing DOM. What makes the re-render concept not enormously wasteful and slow, and in fact much faster than Angular or Ember, is an in memory representation of the DOM with a diffing and batching algorithm that another React team member, Pete Hunt, talks about here, and really that whole presentation is worth watching in terms of understanding the philosophical underpinnings of React. What all of this allows you to do is write simple, declarative components that describe your interface once, rather than imperative mutations to move between UI states. This is good. When virtually every competing technology in a given space starts to copy one solution, it's probably a good solution.\n\n## A Little Housekeeping\nIf you want to follow along with the code you'll need to create a Twitter app through their dev site in order to get API keys for Twitter Oauth. Once that's done you'll need to install Ruby 2.2.0, Node 0.10.x, and Postgres locally if you haven't done so in the past. If you're following along on Windows hopefully you already know how to install things and run bash commands on Windows.\n\n## Getting Started\nOk let's build the demo project, a simple app that allows users to sign in with Twitter and write posts on a wall. To clone the starter repo, open Terminal and run:\n```\ngit clone https://github.com/fredguest/rails-api-react-demo-starter.git blabber\n```\nIf you look at top level directory that was just created, and if you're familiar with Rails, you'll notice a few big differences right away. Inside the \"app\" folder, the \"views\", \"helpers\", \"mailers\", and \"assets\" folders are all missing and will stay that way. Another notable difference is inside the \"config/application.rb\" file, where the requires look like this.",
      "keywords":"elm,flux,replay,live,hot,immutable,functional,predictable,state,reducer,redux",
      "languages":["javascript","ruby","go"],
      "platforms":["npm","go","php","css"],
      "projects":[
         {"name":"redux", "platform":"npm"},
         {"name":"react.js", "platform":"npm"},
         {"name":"bundler", "platform":"rubygems"}
      ],
      "commentsCount":2342
   }
]